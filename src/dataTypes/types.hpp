#pragma once

#include <vector>
#include <cstdint>
#include <math.h>
#include <iostream>

struct Point{

    //Position regarding Y-Axis
    long double X_Position;
    //Position regarding X-Axis.
    long double Y_Position;
    Point() : id{nextId++}{};

    //Static value that works as an autogenerated ID.
    static inline std::uint32_t nextId {0};
    //Const value that is the id of Point
    const std::uint32_t id;
    Point operator=(const Point& input){
        return(input);
    }
};

struct Line{

    //Id of the first point
    std::uint32_t idFirst;
    //Id of the second point
    std::uint32_t idSecond;

};

struct VectorMath{
    long double X_Direction;
    long double Y_Direction;
};

struct Angle{
    //Id of the origin point
    std::uint32_t idOrigin;
    //Id of the first auxiliary point
    std::uint32_t idFirstAux;
    //Id of the second auxiliary point
    std::uint32_t idSecondAux;
    //number of degrees between the three points
    long double degrees{};
    Angle(){};
    Angle(Point* origin, Point* firstAux, Point* secondAux)
        : idOrigin{origin->id}, idFirstAux{firstAux->id}, idSecondAux{secondAux->id}{
        //HOW TO CALCULATE ANGLES: https://math.stackexchange.com/questions/361412/finding-the-angle-between-three-points
        //vector(Origin->firstPoint)
        VectorMath first {firstAux->X_Position - origin->X_Position,
            firstAux->Y_Position - origin->Y_Position};
        //Vector(Origin->secondPoint)
        VectorMath second {secondAux->X_Position - origin->X_Position,
            secondAux->Y_Position - origin->Y_Position};
        //cross product of the vectors
        long double crossProductModule = first.X_Direction * second.Y_Direction - second.X_Direction * first.Y_Direction;
        //product of the modules
        long double firstModule = sqrt(pow(first.X_Direction,2) + pow(first.Y_Direction,2));
        long double secondModule = sqrt(pow(second.X_Direction,2) + pow(second.Y_Direction,2));

        //arc cosine of dot product divided by the lengths
        degrees = asin(crossProductModule/(firstModule*secondModule))*(180/3.14159265358979323846);
        //if(degrees >= 180.0f)
        //    printf("Angle: %Lf\n",degrees);
    }
};

struct Figure{
    //Collection of the member points
    std::vector<Point> allPoints;
    //Collection of the member lines
    std::vector<Line> allLines;
};